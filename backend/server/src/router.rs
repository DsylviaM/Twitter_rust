use axum::{routing::get, Router};

use crate::AppState;

//создадим новую функцию маршрутизатора, это требует некоторого места приложения,
// где мы вернем сюда маршрутизатор Axum
//мы создадим три маршрутизатора, возьмем два из них и обьединим их в третий маршрутизаторб
//чтобы наш первый маршрутизатор был общедоступным маршрутом, это будет те, которые всегда доступны
//нисмотря ни на что. Если посмотреть на вторую часть get то это и есть наш обработчик(метод)
pub fn new_router(state:AppState) -> axum::Router {
    let public_routes = Router::new().route("/", get(move || async {"this is the root page"}));
    // теперь маршрутизаторы по ИД пользователя
    let authorized_routes = Router::new();
    //затем настоящий маршрутизатор, который мы возвращаем
    Router::new()
        //обьединяем наши общедоступные маршруты
        .merge(public_routes)
        .merge(authorized_routes)
}

/* С каждым маршрутизатором мы можем сделать промежуточное программное обеспечение,
 чтобы при поступление запроса мы могли проверить разные вещи
 например: вошли ли пользователи в систему и если все гуд, то разрешит вход, в противном случае
 если что то не так то он отклонит запрос "попробуйте заново войти в систему" или что то подобное нужно будет сделать пользователям
*/